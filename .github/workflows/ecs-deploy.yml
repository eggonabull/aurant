name: Deploy to AWS ECS

on:
  push:
    branches:
      - prod
  workflow_dispatch:

jobs:
  frontend:
    if: false
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Get AWS Account ID and replace variables in task definition
      - name: Get AWS Account ID and prepare task definition
        id: prepare-taskdef
        run: |
          # Get AWS account ID
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          
          # Replace variables in task definition
          sed -i "s|\${AWS_ACCOUNT_ID}|$AWS_ACCOUNT_ID|g" aws_setup/task_definitions/frontend.json.template
          sed -i "s|\${AWS_REGION}|${{ vars.AWS_REGION }}|g" aws_setup/task_definitions/frontend.json.template
          sed -i "s|\${ECR_REGISTRY}|${{ steps.login-ecr.outputs.registry }}|g" aws_setup/task_definitions/frontend.json.template
          sed -i "s|\${IMAGE_TAG}|${{ github.sha }}|g" aws_setup/task_definitions/frontend.json.template
          
          # Validate JSON and create temporary file
          cat aws_setup/task_definitions/frontend.json.template | jq . > aws_setup/task_definitions/frontend-task-definition.json
          
          # Output path to the validated file
          echo "taskdef_file=aws_setup/task_definitions/frontend-task-definition.json" >> $GITHUB_OUTPUT

      # Frontend deployment
      - name: Build, tag, and push Frontend Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: aurant-dev-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd frontend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Fill in the new image ID in the Frontend ECS task definition
        id: frontend-taskdef
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.prepare-taskdef.outputs.taskdef_file }}
          container-name: frontend
          replacements: |
            AWS_ACCOUNT_ID: ${{ steps.prepare-taskdef.outputs.AWS_ACCOUNT_ID }}
            AWS_REGION: ${{ vars.AWS_REGION }}
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            IMAGE_TAG: ${{ github.sha }}
          image: ${{ steps.login-ecr.outputs.registry }}/aurant-dev-frontend:${{ github.sha }}

      - name: Deploy Frontend to ECS
        id: frontend-deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          service: frontend-service
          cluster: aurant
          task-definition: ${{ steps.frontend-taskdef.outputs.task-definition }}
          wait-for-service-stability: true
        
  backend:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Installing the Node
        uses: actions/setup-node@v1
        with:
          node-version: 24

      - name: Prepare Backend task definition
        id: prepare-backend-taskdef-test
        if: steps.login-ecr.outputs.registry != '' && steps.login-ecr.outputs.registry != 'null'
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          IMAGE_TAG="${{ github.sha }}"
          
          # Replace variables in task definition
          AWS_ACCOUNT_ID="$AWS_ACCOUNT_ID" \
          AWS_REGION='${{ vars.AWS_REGION }}' \
          ECR_REGISTRY="$ECR_REGISTRY" \
          IMAGE_TAG="$IMAGE_TAG" \
          DATABASE_URL='${{ secrets.DATABASE_URL }}' \
          node aws_setup/task_definitions/backend-task-definition.ts >> aws_setup/task_definitions/backend-task-definition.json

          # Output path to the validated file
          echo "taskdef_file=aws_setup/task_definitions/backend-task-definition.json" >> $GITHUB_OUTPUT

      - name: Test Backend Task Definition
        id: backend-taskdef-test
        if: steps.login-ecr.outputs.registry != '' && steps.login-ecr.outputs.registry != 'null'
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          image: ${{ steps.login-ecr.outputs.registry }}/aurant-dev-backend:${{ github.sha }}
          task-definition: ${{ steps.prepare-backend-taskdef-test.outputs.taskdef_file }}
          container-name: backend

      # Backend deployment
      - name: Build, tag, and push Backend Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: aurant-dev-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          if [ -d "backend" ]; then
            cd backend
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          else
            echo "Warning: Backend directory not found, skipping backend deployment"
          fi

      - name: Prepare Backend task definition
        id: prepare-backend-taskdef
        if: steps.login-ecr.outputs.registry != '' && steps.login-ecr.outputs.registry != 'null'
        run: |
          # Validate JSON and create temporary file
          cat aws_setup/task_definitions/backend-task-definition.json | jq . > 
          
          # Output path to the validated file
          echo "taskdef_file=aws_setup/task_definitions/backend-task-definition.json" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Backend ECS task definition
        id: backend-taskdef
        if: steps.login-ecr.outputs.registry != '' && steps.login-ecr.outputs.registry != 'null'
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          image: ${{ steps.login-ecr.outputs.registry }}/aurant-dev-backend:${{ github.sha }}
          task-definition: aws_setup/task_definitions/backend-task-definition.json
          container-name: backend
          replacements: |
            AWS_ACCOUNT_ID: ${{ steps.prepare-backend-taskdef.outputs.AWS_ACCOUNT_ID }}
            AWS_REGION: ${{ vars.AWS_REGION }}
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            IMAGE_TAG: ${{ github.sha }}
            DATABASE_URL: ${{ secrets.DATABASE_URL }}
            

      - name: Deploy Backend to ECS
        id: backend-deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          service: backend-service
          cluster: aurant
          task-definition: ${{ steps.backend-taskdef.outputs.task-definition }}
          wait-for-service-stability: true
